// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.2
// source: ipld.proto

package ipld

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IPLDServiceClient is the client API for IPLDService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IPLDServiceClient interface {
	UploadFile(ctx context.Context, in *FileUploadRequest, opts ...grpc.CallOption) (*FileUploadResponse, error)
	GetFileByCID(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileResponse, error)
}

type iPLDServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIPLDServiceClient(cc grpc.ClientConnInterface) IPLDServiceClient {
	return &iPLDServiceClient{cc}
}

func (c *iPLDServiceClient) UploadFile(ctx context.Context, in *FileUploadRequest, opts ...grpc.CallOption) (*FileUploadResponse, error) {
	out := new(FileUploadResponse)
	err := c.cc.Invoke(ctx, "/ipld.IPLDService/UploadFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPLDServiceClient) GetFileByCID(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileResponse, error) {
	out := new(FileResponse)
	err := c.cc.Invoke(ctx, "/ipld.IPLDService/GetFileByCID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IPLDServiceServer is the server API for IPLDService service.
// All implementations must embed UnimplementedIPLDServiceServer
// for forward compatibility
type IPLDServiceServer interface {
	UploadFile(context.Context, *FileUploadRequest) (*FileUploadResponse, error)
	GetFileByCID(context.Context, *FileRequest) (*FileResponse, error)
	mustEmbedUnimplementedIPLDServiceServer()
}

// UnimplementedIPLDServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIPLDServiceServer struct {
}

func (UnimplementedIPLDServiceServer) UploadFile(context.Context, *FileUploadRequest) (*FileUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedIPLDServiceServer) GetFileByCID(context.Context, *FileRequest) (*FileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileByCID not implemented")
}
func (UnimplementedIPLDServiceServer) mustEmbedUnimplementedIPLDServiceServer() {}

// UnsafeIPLDServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IPLDServiceServer will
// result in compilation errors.
type UnsafeIPLDServiceServer interface {
	mustEmbedUnimplementedIPLDServiceServer()
}

func RegisterIPLDServiceServer(s grpc.ServiceRegistrar, srv IPLDServiceServer) {
	s.RegisterService(&IPLDService_ServiceDesc, srv)
}

func _IPLDService_UploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPLDServiceServer).UploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipld.IPLDService/UploadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPLDServiceServer).UploadFile(ctx, req.(*FileUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPLDService_GetFileByCID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPLDServiceServer).GetFileByCID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipld.IPLDService/GetFileByCID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPLDServiceServer).GetFileByCID(ctx, req.(*FileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IPLDService_ServiceDesc is the grpc.ServiceDesc for IPLDService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IPLDService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ipld.IPLDService",
	HandlerType: (*IPLDServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadFile",
			Handler:    _IPLDService_UploadFile_Handler,
		},
		{
			MethodName: "GetFileByCID",
			Handler:    _IPLDService_GetFileByCID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ipld.proto",
}
